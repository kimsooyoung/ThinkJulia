### A Pluto.jl notebook ###
# v0.19.40

using Markdown
using InteractiveUtils

# ╔═╡ d9d9bba0-e835-11ee-0ab1-8b3a618e2ecf
md"""
# Sooyoung Kim's Think Julia 

![image](https://github.com/kimsooyoung/ThinkJulia/assets/12381733/260603e2-20ed-428e-b15b-0381f73fb46c)
"""

# ╔═╡ 67942e08-ee84-4149-b0de-31e5b6d31293
md"""
## Variable and Experssion

지난 시간에 이어 계속해서 Julia의 기초에 대해 알아보겠습니다.
"""

# ╔═╡ d3c769af-b108-482c-ada7-d30dcd8d2f71
md"""
#### 2.1 스크립트 모드
"""

# ╔═╡ 8c708775-211c-438c-8a4c-3c93570de029
md"""
* 터미널 프로그램에서 `julia`를 입력하거나 지금 이 Pluto에서 코드를 작성하고 바로 실행하는 형태를 "대화형 모드"라고 말합니다.

* 대화형 모드는 직접 Julia와 상호작용하고 이 과정을 하나하나씩 볼 수 있다는 장점이 있지만, 코드가 길어지면 다루기 힘들다는 단점이 있습니다.

* 따라서 `xxx.jl` 확장자를 갖는 julia file을 만들고, `julia xxx.jl`을 통해 컴파일 및 실행을 하는 스크립트 모드를 실습해보고자 합니다.
"""

# ╔═╡ 05f15850-53f9-41ea-a8f3-6656c7fce4c9
md"""
```
5
x = 5
x + 1
```
"""

# ╔═╡ 152364f6-b78f-4e7f-8e4e-e7137b9b9679
md"""
1. `first_script_mode.jl` (이름은 마음대로 지어도 됩니다.)이라는 julia file을 만들고 위의 코드를 그대로 입력합니다.
2. 파일이 저장된 위치에서 터미널을 실행시켜 `julia first_script_mode.jl`을 입력하고 결과를 확인해 봅시다.
"""

# ╔═╡ 110d9178-dae6-4566-80a2-39342c718e03
md"""
#### 2.2 연산자 우선순위
"""

# ╔═╡ 9d1feecb-d59a-4adb-b3d9-aa54257b0b80
md"""
덧셈, 뺄셈, 나눗셈, 곱셈과 같은 기본적인 사칙연산과 더불어 거듭제곱(^), 나머지(%)와 같이 Julia는 여러 연산자를 지원합니다. 다만, 여러 연산자를 포함하는 복합적인 수식을 사용할 시 주의가 필요합니다. 

첫째로, 괄호()로 묶인 연산은 항상 최우선순위를 갖습니다.
"""

# ╔═╡ 07068b7a-0cd8-4360-819a-44886ec17ab0
begin 
	@show 2*(3-1)
	@show (1+1)^(5-2)
end

# ╔═╡ 862b8d52-f687-444b-bba0-4d52db67304e
md"""
다름으로, 수학 시간에 배운 것과 같이 곱셈과 나눗셈 계열 연산은 덧셈, 뺼셈 연산보다 높은 우선순위를 갖습니다. 그래서 2*3^2는 36이 아니고 18이 됩니다. 
"""

# ╔═╡ de0a8b8a-696e-4921-bb22-ce2e2c1edbed
begin
	@show 1+2^3
	@show 2*3^2
end

# ╔═╡ 73d390a5-f704-4802-8ec1-398deaecc1cf
md"""
참고로 다른 언어들과 달리 단순 곱셈의 경우 곱셈 연산자를 생략해도 동작합니다. 하지만, 이렇게 사용하는 습관은 이후 디버깅하기 어렵기 떄문에 참고삼아서만 알아두도록 합시다.
"""

# ╔═╡ cace0ca1-e72e-4c09-8bcf-0cd737c2bafc
begin
	x = 5
	@show 2x
end

# ╔═╡ 2e29fa87-29e8-4d88-a33b-afd0081d8f32
md"""
#### 2.3 문자열 연산자
"""

# ╔═╡ 71aa892f-25bf-45f6-96c1-5fc1c0b4c24c
md"""
사칙연산은 기본적으로 대수 자료형에 사용됩니다. 예를 들어 아래와 같이 문자열과 문자열 사이에 사칙연산은 원칙적으로 불가하지요.
"""

# ╔═╡ 8bee1859-e0db-4825-a1a6-887ca28f5e54
"2" - "1"
"three" + "two"
"four" / "one"

# ╔═╡ 817c85b4-f975-4770-a0a4-ccf5eac35014
md"""
하지만 예외적으로, **곱셈** 계열 연산은 문자열에도 적용 가능하며 해당 횟수만큼 문자열을 이어 붙인다는 뜻을 가집니다.
"""

# ╔═╡ cac47b70-fcd1-41b6-9732-2d16b937f4e4
begin
	@show "first word " * "second word"
	@show "Spam " ^ 3
end

# ╔═╡ 96b3968e-c719-4ad4-b25c-f381cae9dd94
md"""
### 연습 2-2
---
> 2장에서 새롭게 배운 기능에 대해 대화형 모드에서 의도적으로 오류를 발생시키고, 어떻게 잘못되는지 확인해보세요.
1. `n = 42`가 맞는 문장인 것은 알고 있습니다. 42 = n은 어떻습니까?
2. `x = y = 1`은 어떻습니까?
3. 어떤 프로그래밍 언어에서는 모든 문장이 세미콜론, 즉 `;` 기호가 붙어서 끝납니다. 줄리 아의 문장 맨 마지막에 세미콜론을 붙이면 어떻게 되나요?
4. 문장의 마지막에 마침표를 넣으면요?
5. 수학에서는 x와 y를 곱할 때, xy처럼 연산자를 생략할 수 있습니다. 줄리아에서도 그렇 게 될까요? `5x`는 어떻습니까?
"""

# ╔═╡ 966e05f2-e6ae-4b9e-888f-70cfb6948c5b
md"""
### 연습 2-3
---
> 줄리아 REPL을 실행해서 계산기로 써봅시다.
1. 반지름이 r인 구의 부피는 1입니다. 반지름이 5인 구의 부피는 얼마인가요?
2. 어떤 책의 정가가 `$24.95`인데, 서점에서 `40%` 할인을 해줍니다. 배송비는 한 권일 때 $3 이고, 한 권이 늘어날 때마다 75센트가 붙습니다. 60권을 주문 및 배송한다면 얼마의 비 용이 들까요?
3. 제가 아침 6시 52분에 집을 떠나서, 1마일을 느긋하게 달리고 (1마일당 8분 15초), 3마 일을 조금 빠르게 달리고 (1마일당 7분 12초), 다시 1마일을 느긋하게 달린다면, 언제 집 에 도착하겠습니까?
"""

# ╔═╡ Cell order:
# ╟─d9d9bba0-e835-11ee-0ab1-8b3a618e2ecf
# ╟─67942e08-ee84-4149-b0de-31e5b6d31293
# ╟─d3c769af-b108-482c-ada7-d30dcd8d2f71
# ╟─8c708775-211c-438c-8a4c-3c93570de029
# ╟─05f15850-53f9-41ea-a8f3-6656c7fce4c9
# ╟─152364f6-b78f-4e7f-8e4e-e7137b9b9679
# ╟─110d9178-dae6-4566-80a2-39342c718e03
# ╟─9d1feecb-d59a-4adb-b3d9-aa54257b0b80
# ╠═07068b7a-0cd8-4360-819a-44886ec17ab0
# ╟─862b8d52-f687-444b-bba0-4d52db67304e
# ╠═de0a8b8a-696e-4921-bb22-ce2e2c1edbed
# ╟─73d390a5-f704-4802-8ec1-398deaecc1cf
# ╠═cace0ca1-e72e-4c09-8bcf-0cd737c2bafc
# ╟─2e29fa87-29e8-4d88-a33b-afd0081d8f32
# ╟─71aa892f-25bf-45f6-96c1-5fc1c0b4c24c
# ╠═8bee1859-e0db-4825-a1a6-887ca28f5e54
# ╟─817c85b4-f975-4770-a0a4-ccf5eac35014
# ╠═cac47b70-fcd1-41b6-9732-2d16b937f4e4
# ╟─96b3968e-c719-4ad4-b25c-f381cae9dd94
# ╟─966e05f2-e6ae-4b9e-888f-70cfb6948c5b
