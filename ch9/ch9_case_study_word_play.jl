### A Pluto.jl notebook ###
# v0.19.9

using Markdown
using InteractiveUtils

# ╔═╡ a193f7b0-015d-11ef-2cd8-8b90df9391a2
md"""
# Sooyoung Kim's Think Julia 

![image](https://github.com/kimsooyoung/ThinkJulia/assets/12381733/260603e2-20ed-428e-b15b-0381f73fb46c)
"""

# ╔═╡ f6210c3d-518a-45ac-ba39-2be8095394fe
md"""
## Case Study: Word Play (단어로 놀기)

"""

# ╔═╡ 40257df1-7dc4-4461-a9ed-90e99f3b6f05
md"""
4강에 이어서 사례 연구 챕터가 돌아왔습니다. 이번 강의에서는 어떤 성질을 가진 단어를 찾아보는 낱말 퍼즐을 풀어볼 것입니다. 

이번 챕터를 위해 113809개의 단어가 적혀 있는 **words.txt**라는 파일을 준비해두었습니다. 파일을 불러와보겠습니다.
"""

# ╔═╡ f6872e68-c46f-40b6-aa9e-9939ac4ed139
fin = open("words.txt")

# ╔═╡ d4c41e89-6cad-4543-9aac-37f6a774c731
md"""
여기에서 사용한 **open()**이라는 함수는 Julia에 내장된 함수로 매개변수인 파일명을 받아 파일 스트림을 반환합니다. 

**파일 스트림**이란, 우리의 Julia 프로그램과 txt 문자 파일 사이 데이터의 읽고 쓰기를 위한 추상적인 개념입니다. 

말이 좀 어려운데요, 우리가 스마트폰을 사용할 때, 메모장의 글자, 동영상, 혹은 게임의 화면 모두 액정 디스플레이를 통해 눈으로 전달되지요? 이처럼 여러 데이터를 효율적으로 표현하기 위한 방법이라고 이해하시면 되겠습니다.
"""

# ╔═╡ 9d572b74-58b8-434c-8149-ab8a20c30011
md"""
![image](https://github.com/kimsooyoung/mirobot_ros2/assets/12381733/6d51d660-1376-4932-b413-3b49eebcc803)
"""

# ╔═╡ 0e65ed59-5b5e-4b0b-9884-2714b484df4e
readline(fin)

# ╔═╡ e066a8da-6271-4304-aed4-19cd67b07086
md"""
Julia에서는 파일 스트림을 사용하여 파일을 한줄씩 읽거나 한 단어씩 읽는 등의 유용한 내장 함수들을 제공합니다. **readline()** 함수는 파일의 첫 부분부터 한줄씩 읽고 문자열로 반환합니다.
"""

# ╔═╡ 300305e6-a3f1-4d65-a943-57e1499c2ebc
readline(fin)

# ╔═╡ 3dfe54dc-a246-47e9-96b7-40fd7184e77a
md"""
readline을 또 호출하였습니다. 자동으로 다음 라인을 읽은 것이지요. 이는 파일 스트림 내부적으로 현재 위치를 담고 있기 때문입니다.
"""

# ╔═╡ be3369ef-4bab-4cc6-af37-106b7ba7df0c
md"""
아래와 같이 for-loop를 사용하여 특정 개수만큼의 단어를 읽어들일 수도 있겠지요.
"""

# ╔═╡ eeaf2d20-3e29-4632-9c6a-62c1aec38196
for i in 1:10
	cur_word = readline(fin)
	println(cur_word)
end

# ╔═╡ c6a08061-7192-45e8-9f73-c9f549415aac
md"""
### 연습 9-1
---
> words.txt 파일 내 단어 중에서, 길이가 20글자 이상인 단어만 출력하는 프로그램을 작성해보세요. (모든 단어는 영어로 구성되어 있습니다.)
"""

# ╔═╡ 7b397589-bcbd-4a11-ad23-043ef40f67ec
md"""
### 연습 9-2
---
> 단어 내 알파벳 'e'가 없다면 true를 반환하는 함수 **hasno_e**를 작성해보세요.
"""

# ╔═╡ 79c2710c-1a59-42d7-877a-9e4e96fb2efb
md"""
### 연습 9-3
---
> 어떤 단어와 금지 문자로 구성된 문자열을 받아서, 그 단어가 금지 문자를 포함하지 않으면 true를 반환하는 함수 **avoids**를 작성하세요.

> 프로그램을 좀 더 수정해봅시다. 금지 문자로 구성된 문자열을 입력받고, 금지 문자를 포함하지 않는 단어의 개수도 출력하도록 해보세요. (제외되는 단어의 숫자가 가장 작아지도록 하는 5개의 금지 문자를 찾아보세요!)
"""

# ╔═╡ dd5d884f-be47-4c7a-b8df-ca45a3b6fc5e
md"""
### 연습 9-4
---
> 어떤 단어와 문자열을 입력받은 후, 단어가 문자열에 있는 글자로만 이루어져 있으면 true를 반환하는 함수 **usesonly**를 작성하세요. (acefhlo만 가지고 문장을 만들 수 있나요? 작성한 코드로 확인해봅시다.)
"""

# ╔═╡ 6dcabe0b-6ba2-4526-addc-119ee74f9802
md"""
### 연습 9-5
---
> 어떤 단어와 문자열을 입력받은 후, 단어가 문자열에 있는 모든 글자를 한 번 이상 사용하면 true를 반환하는 함수 **usesall**을 작성하세요. (모음 aeiou만을 사용하는 단어는 몇 개가 있나요?)
"""

# ╔═╡ c5a167f9-9809-41fa-ab3e-5f8919275316
md"""
### 연습 9-6
---
> 단어의 글자들이 알파벳 숫서로 되어 있으면 (같은 글자가 연달아 있는 것도 괜찮습니다). true를 반환하는 **isabecedarian**을 작성하세요. 글자가 알파벳 순서인 단어는 얼마나 많이 있나요?
"""

# ╔═╡ 36d1ca3d-2ad1-452c-943a-8c43092474fd


# ╔═╡ Cell order:
# ╟─a193f7b0-015d-11ef-2cd8-8b90df9391a2
# ╟─f6210c3d-518a-45ac-ba39-2be8095394fe
# ╟─40257df1-7dc4-4461-a9ed-90e99f3b6f05
# ╠═f6872e68-c46f-40b6-aa9e-9939ac4ed139
# ╟─d4c41e89-6cad-4543-9aac-37f6a774c731
# ╟─9d572b74-58b8-434c-8149-ab8a20c30011
# ╠═0e65ed59-5b5e-4b0b-9884-2714b484df4e
# ╟─e066a8da-6271-4304-aed4-19cd67b07086
# ╠═300305e6-a3f1-4d65-a943-57e1499c2ebc
# ╟─3dfe54dc-a246-47e9-96b7-40fd7184e77a
# ╟─be3369ef-4bab-4cc6-af37-106b7ba7df0c
# ╠═eeaf2d20-3e29-4632-9c6a-62c1aec38196
# ╟─c6a08061-7192-45e8-9f73-c9f549415aac
# ╟─7b397589-bcbd-4a11-ad23-043ef40f67ec
# ╟─79c2710c-1a59-42d7-877a-9e4e96fb2efb
# ╟─dd5d884f-be47-4c7a-b8df-ca45a3b6fc5e
# ╟─6dcabe0b-6ba2-4526-addc-119ee74f9802
# ╟─c5a167f9-9809-41fa-ab3e-5f8919275316
# ╠═36d1ca3d-2ad1-452c-943a-8c43092474fd
